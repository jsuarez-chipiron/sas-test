/**
* @author Niklas Lundkvist, Deloitte
* @date 2020
*
* @description Entry point for event related functionality.
*/

public class IRR_SVC_CommunicationService {
    /**
     * The status set for created communication log records without errors
     */
    static final String COM_LOG_STATUS_CREATED = 'Created';
    /**
     * The status set for created communication log records with errors
     */
    static final String COM_LOG_STATUS_ERROR = 'Error';
    /**
     * The status set for created communication log records which were filtered due to not being in the whitelist
     */
    static final String COM_LOG_STATUS_FILTERED = 'Not Whitelisted';
    /**
     * The channel set fior created sms communication log records
     */
    static final String COM_LOG_CHANNEL_SMS = 'SMS';

    /**
     * Starting text of copyright notice to strip from communication log message content
     */
    static final String COM_LOG_COPYRIGHT_NOTICE = 'Scandinavian Airlines ©';

    public static void processEvent(String eventType, String payload) {
        service().processEvent(eventType, payload);
    }

    public static void processEvent(String eventType, Object payload) {
        service().processEvent(eventType, payload);
    }
    public static void processGDPRLogs(Set<Id> idSet, DateTime lastRetentionDate) {
        service().processGDPRLogs(idSet, lastRetentionDate);
    }

    private static IRR_SVC_ICommunicationService service() {
        return (IRR_SVC_ICommunicationService) IRR_Application.Service.newInstance(IRR_SVC_ICommunicationService.class);
    }

    public class CommunicationLogFactory {

        private fflib_ISObjectUnitOfWork unitOfWork;

        /**
         * List of CommunicationLogs generated by the factory
         **/
        public List<IRR_CommunicationLog__c> communicationLogs {get; private set;}

        public CommunicationLogFactory(fflib_ISObjectUnitOfWork unitOfWork) {
            this.unitOfWork = unitOfWork;
            this.communicationLogs = new List<IRR_CommunicationLog__c>();
        }

        public void add(IRR_MOD_Message message) {
            IRR_CommunicationLog__c log = new IRR_CommunicationLog__c();
            if (message.passengerInfo != null) {
                if (message.passengerInfo.thisSegment != null) {
                    log.IRR_FlightId__c = message.passengerInfo.thisSegment.flightId;
                }
                log.IRR_BookingReference__c = message.passengerInfo.bookingReference;
                log.IRR_CodsId__c = message.passengerInfo.codsId;
                log.IRR_RecipientName__c = message.passengerInfo.lastNameSlashFirstName;
            }
            log.IRR_Channel__c = String.valueOf(message.channel);
            log.IRR_ContactKey__c = message.contactKey;
            log.IRR_MessageKey__c = message.messageKey;
            log.IRR_Recipient__c = message.recipient;
            log.IRR_MessageType__c = message.type;
            log.IRR_ResponseMessage__c = message.responseMessage;
            log.IRR_Status__c = message.status;
            if (message.SFMCMessage != null && message.SFMCMessage.errorCode != null &&
                    message.SFMCMessage.errorCode != 0) {
                log.IRR_Status__c = COM_LOG_STATUS_ERROR;
                log.IRR_StatusCode__c = message.SFMCMessage.errorCode;
                log.IRR_ErrorMessage__c = message.SFMCMessage.errorMessage;
            }
            log.IRR_MessageContent__c = String.isNotBlank(message.content) && message.content.startsWith('<!DOCTYPE') ?
                    message.content.stripHtmlTags().substringBeforeLast(COM_LOG_COPYRIGHT_NOTICE) : message.content;
            unitOfWork.registerNew(log);
        }

        /**
         * Adds a communication log record for the provided sms message
         * @param sms The sms message for which to add a communication log record
         * @param messageType The type of message sent
         * @param groupExtId The external id of the group of the message sent
         */
        public void add(IRR_SVC_SFMCService.SMSMessage sms, String messageType, String groupExtId) {
            IRR_CommunicationLog__c log = new IRR_CommunicationLog__c();
            log.IRR_Channel__c = COM_LOG_CHANNEL_SMS;
            log.IRR_ContactKey__c = sms.contactKey;
            log.IRR_MessageKey__c = sms.messageKey;
            log.IRR_Recipient__c = sms.recipient;
            log.IRR_ExternalId__c = sms.externalId;
            log.IRR_ExternalGroupId__c = groupExtId;
            log.IRR_MessageType__c = messageType;
            if(sms.errorCode==null || sms.errorCode==0) {
                log.IRR_Status__c = COM_LOG_STATUS_CREATED;
            }
            else {
                log.IRR_Status__c = COM_LOG_STATUS_ERROR;
                log.IRR_StatusCode__c = sms.errorCode;
                log.IRR_ErrorMessage__c = sms.errorMessage;
            }
            log.IRR_MessageContent__c = sms.content;
            unitOfWork.registerNew(log);
        }

        /**
         * Add a generic sms errors to the log for messsages filtered and not forwarded to marketing cloud
         * @param contactKey The key which wouldhave been used to identify the contact
         * @param recipient The phone number of the recipient 
         * @param content The message which should have been sent to the recipient
         * @param messageType The type of message sent
         * @param groupExtId The external id of the group of the message sent
         * @param filtered Whether the message was filtered due to not being in the whitelist
         * @param errorCode The custom error code to describe the error
         * @param errorMessage The customer error message to describe the error
         */
        public void addSMSError(String contactKey, String recipient, String content, String messageType, String groupExtId, Boolean filtered, Integer errorCode, String errorMessage) {
            IRR_CommunicationLog__c log = new IRR_CommunicationLog__c();
            log.IRR_Channel__c = COM_LOG_CHANNEL_SMS;
            log.IRR_Recipient__c = recipient;
            log.IRR_ExternalGroupId__c = groupExtId;
            log.IRR_MessageType__c = messageType;
            log.IRR_Status__c = filtered ? COM_LOG_STATUS_FILTERED : COM_LOG_STATUS_ERROR;
            log.IRR_StatusCode__c = errorCode;
            log.IRR_ErrorMessage__c = errorMessage;
            log.IRR_MessageContent__c = content;
            unitOfWork.registerNew(log);
        }
    }

    public class EventException extends Exception { }
}