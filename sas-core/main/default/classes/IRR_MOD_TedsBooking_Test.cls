/**
 * @author Niklas Lundkvist, IRR_MOD_TedsBooking
 * @date 2020-03-16
 * @description Test Class for TedsBooking model class.
 *      Automatically generated by JSON2Apex - http://JSON2Apex.herokuapp.com/
 */

@IsTest
private class IRR_MOD_TedsBooking_Test {

    // This test method should give 100% coverage
    @IsTest
    static void testParse() {
        String json = '{"id":"P2WNNO-20200205","reference":"P2WNNO","type":"ReturnTrip","status":"Active","codsId":"ABC1234","audit":{"created":{"officeId":"STOSK08RV","at":"2020-02-05T17:32:28Z"},"updated":{"officeId":"STOSK08RV","at":"2017-02-12T17:32:28Z"}},"passengers":[{"id":"P2WNNO-01","title":"MR","firstName":"Sam","lastName":"Milley","type":"Adult","contact":{"phone":[{"type":"CTCM","number":"+46701234567"}],"email":[{"type":"CTCE","address":"name@email.com"}]},"frequentTraveler":{"carrier":"SK","tier":"G","number":"128054392"},"segments":[{"segmentId":"P2WNNO-O-01-01","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-O-01-02","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-O-01-03","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-O-01-04","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-I-01-01","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true}]}],"trips":[{"id":"P2WNNO-O-01","type":"Outbound","segments":[{"id":"P2WNNO-O-01-01","transportationType":"Flight","statusCode":"HK","status":"Confirmed","flight":{"id":"SK0946-20200211-ORD-ARN","operatingCarrier":"SK","operatingFlightNumber":"0946","marketingCarrier":"SK","marketingFlightNumber":"0946","departure":{"station":"ORD","terminal":"2","scheduledTime":{"local":"2020-02-11T16:00:00Z","utc":"2020-02-12T00:00:00Z"}},"arrival":{"station":"AMS","terminal":"2","scheduledTime":{"local":"2020-02-12T07:25:00Z","utc":"2020-02-12T06:25:00Z"}}},"bookingClass":"Y","serviceClass":"C"},{"id":"TX7ZK8-O-01-02","transportationType":"Flight","statusCode":"UN","status":"Cancelled","flight":{"id":"SK0579-20200212-ARN-CDG","operatingCarrier":"SK","operatingFlightNumber":"0579","marketingCarrier":"SK","marketingFlightNumber":"0579","departure":{"station":"ARN","terminal":"2","scheduledTime":{"local":"2020-02-12T16:10:00Z","utc":"2020-02-12T15:10:00Z"}},"arrival":{"station":"CDG","terminal":"2","scheduledTime":{"local":"2020-02-12T18:45:00Z","utc":"2020-02-12T17:45:00Z"}}},"bookingClass":"Y","serviceClass":"C"},{"id":"P2WNNO-O-01-03","transportationType":"Flight","statusCode":"TK","status":"Confirmed","flight":{"id":"SK1407-20200212-ARN-CPH","operatingCarrier":"SK","operatingFlightNumber":"1407","marketingCarrier":"SK","marketingFlightNumber":"1407","departure":{"station":"ARN","terminal":"2","scheduledTime":{"local":"2020-02-12T15:10:00Z","utc":"2020-02-12T14:10:00Z"}},"arrival":{"station":"CPH","terminal":"2","scheduledTime":{"local":"2020-02-12T16:25:00Z","utc":"2020-02-12T15:25:00Z"}}},"bookingClass":"Y","serviceClass":"C"},{"id":"P2WNNO-O-01-03","transportationType":"Flight","statusCode":"TK","status":"Confirmed","flight":{"id":"SK0559-20200212-CPH-CDG","operatingCarrier":"SK","operatingFlightNumber":"0559","marketingCarrier":"SK","marketingFlightNumber":"0559","departure":{"station":"CPH","terminal":"2","scheduledTime":{"local":"2020-02-12T17:10:00Z","utc":"2020-02-12T16:10:00Z"}},"arrival":{"station":"CDG","terminal":"2","scheduledTime":{"local":"2020-02-12T19:05:00Z","utc":"2020-02-12T18:05:00Z"}}}},{"id":"P2WNNO-O-01-04","transportationType":"Flight","statusCode":"HK","status":"Confirmed","flight":{"id":"LX0645-20200212-CDG-ZRH","operatingCarrier":"LX","operatingFlightNumber":"0645","marketingCarrier":"LX","marketingFlightNumber":"0645","departure":{"station":"CDG","terminal":"2","scheduledTime":{"local":"2020-02-12T20:50:00Z","utc":"2020-02-12T19:50:00Z"}},"arrival":{"station":"ZRH","terminal":"2","scheduledTime":{"local":"2020-02-12T22:00:00Z","utc":"2020-02-12T21:00:00Z"}}},"bookingClass":"Y","serviceClass":"C"}]}]}';
        IRR_MOD_TedsBooking r = IRR_MOD_TedsBooking.parse(json);
        System.assert(r != null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.ScheduledTime objScheduledTime = new IRR_MOD_TedsBooking.ScheduledTime(System.JSON.createParser(json));
        System.assert(objScheduledTime != null);
        System.assert(objScheduledTime.local == null);
        System.assert(objScheduledTime.utc == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Email objEmail = new IRR_MOD_TedsBooking.Email(System.JSON.createParser(json));
        System.assert(objEmail != null);
        System.assert(objEmail.type_Z == null);
        System.assert(objEmail.address == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Flight objFlight = new IRR_MOD_TedsBooking.Flight(System.JSON.createParser(json));
        System.assert(objFlight != null);
        System.assert(objFlight.id == null);
        System.assert(objFlight.operatingCarrier == null);
        System.assert(objFlight.operatingFlightNumber == null);
        System.assert(objFlight.marketingCarrier == null);
        System.assert(objFlight.marketingFlightNumber == null);
        System.assert(objFlight.departure == null);
        System.assert(objFlight.arrival == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Segments objSegments = new IRR_MOD_TedsBooking.Segments(System.JSON.createParser(json));
        System.assert(objSegments != null);
        System.assert(objSegments.segmentId == null);
        System.assert(objSegments.seatedWith == null);
        System.assert(objSegments.ticket == null);
        System.assert(objSegments.seat == null);
        System.assert(objSegments.isCheckedIn == null);
        System.assert(objSegments.checkinOfficeId == null);
        System.assert(objSegments.isBoarded == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Created objCreated = new IRR_MOD_TedsBooking.Created(System.JSON.createParser(json));
        System.assert(objCreated != null);
        System.assert(objCreated.officeId == null);
        System.assert(objCreated.at == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Contact objContact = new IRR_MOD_TedsBooking.Contact(System.JSON.createParser(json));
        System.assert(objContact != null);
        System.assert(objContact.phone == null);
        System.assert(objContact.email == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Audit objAudit = new IRR_MOD_TedsBooking.Audit(System.JSON.createParser(json));
        System.assert(objAudit != null);
        System.assert(objAudit.created == null);
        System.assert(objAudit.updated == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.FrequentTraveler objFrequentTraveler = new IRR_MOD_TedsBooking.FrequentTraveler(System.JSON.createParser(json));
        System.assert(objFrequentTraveler != null);
        System.assert(objFrequentTraveler.carrier == null);
        System.assert(objFrequentTraveler.tier == null);
        System.assert(objFrequentTraveler.number_Z == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Passengers objPassengers = new IRR_MOD_TedsBooking.Passengers(System.JSON.createParser(json));
        System.assert(objPassengers != null);
        System.assert(objPassengers.id == null);
        System.assert(objPassengers.title == null);
        System.assert(objPassengers.firstName == null);
        System.assert(objPassengers.lastName == null);
        System.assert(objPassengers.type_Z == null);
        System.assert(objPassengers.contact == null);
        System.assert(objPassengers.frequentTraveler == null);
        System.assert(objPassengers.segments == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Departure objDeparture = new IRR_MOD_TedsBooking.Departure(System.JSON.createParser(json));
        System.assert(objDeparture != null);
        System.assert(objDeparture.station == null);
        System.assert(objDeparture.terminal == null);
        System.assert(objDeparture.scheduledTime == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Phone objPhone = new IRR_MOD_TedsBooking.Phone(System.JSON.createParser(json));
        System.assert(objPhone != null);
        System.assert(objPhone.type_Z == null);
        System.assert(objPhone.number_Z == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Segments_Z objSegments_Z = new IRR_MOD_TedsBooking.Segments_Z(System.JSON.createParser(json));
        System.assert(objSegments_Z != null);
        System.assert(objSegments_Z.id == null);
        System.assert(objSegments_Z.transportationType == null);
        System.assert(objSegments_Z.statusCode == null);
        System.assert(objSegments_Z.status == null);
        System.assert(objSegments_Z.flight == null);
        System.assert(objSegments_Z.bookingClass == null);
        System.assert(objSegments_Z.serviceClass == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking objIRR_MOD_TedsBooking = new IRR_MOD_TedsBooking(System.JSON.createParser(json));
        System.assert(objIRR_MOD_TedsBooking != null);
        System.assert(objIRR_MOD_TedsBooking.id == null);
        System.assert(objIRR_MOD_TedsBooking.reference == null);
        System.assert(objIRR_MOD_TedsBooking.type_Z == null);
        System.assert(objIRR_MOD_TedsBooking.status == null);
        System.assert(objIRR_MOD_TedsBooking.codsId == null);
        System.assert(objIRR_MOD_TedsBooking.audit == null);
        System.assert(objIRR_MOD_TedsBooking.passengers == null);
        System.assert(objIRR_MOD_TedsBooking.trips == null);

        json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
        IRR_MOD_TedsBooking.Trips objTrips = new IRR_MOD_TedsBooking.Trips(System.JSON.createParser(json));
        System.assert(objTrips != null);
        System.assert(objTrips.id == null);
        System.assert(objTrips.type_Z == null);
        System.assert(objTrips.segments == null);
    }

    // This test method should give 100% coverage
    @IsTest
    static void testParseArray() {
        String json = '[{"id":"P2WNNO-20200205","reference":"P2WNNO","type":"ReturnTrip","status":"Active","codsId":"ABC1234","audit":{"created":{"officeId":"STOSK08RV","at":"2020-02-05T17:32:28Z"},"updated":{"officeId":"STOSK08RV","at":"2017-02-12T17:32:28Z"}},"passengers":[{"id":"P2WNNO-01","title":"MR","firstName":"Sam","lastName":"Milley","type":"Adult","contact":{"phone":[{"type":"CTCM","number":"+46701234567"}],"email":[{"type":"CTCE","address":"name@email.com"}]},"frequentTraveler":{"carrier":"SK","tier":"G","number":"128054392"},"segments":[{"segmentId":"P2WNNO-O-01-01","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-O-01-02","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-O-01-03","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-O-01-04","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true},{"segmentId":"P2WNNO-I-01-01","seatedWith":null,"ticket":{"number":"117-3456789009876","type":"ETKT"},"seat":"3C","isCheckedIn":true,"checkinOfficeId":"OSLSK08VB","isBoarded":true}]}],"trips":[{"id":"P2WNNO-O-01","type":"Outbound","segments":[{"id":"P2WNNO-O-01-01","transportationType":"Flight","statusCode":"HK","status":"Confirmed","flight":{"id":"SK0946-20200211-ORD-ARN","operatingCarrier":"SK","operatingFlightNumber":"0946","marketingCarrier":"SK","marketingFlightNumber":"0946","departure":{"station":"ORD","terminal":"2","scheduledTime":{"local":"2020-02-11T16:00:00Z","utc":"2020-02-12T00:00:00Z"}},"arrival":{"station":"AMS","terminal":"2","scheduledTime":{"local":"2020-02-12T07:25:00Z","utc":"2020-02-12T06:25:00Z"}}},"bookingClass":"Y","serviceClass":"C"},{"id":"TX7ZK8-O-01-02","transportationType":"Flight","statusCode":"UN","status":"Cancelled","flight":{"id":"SK0579-20200212-ARN-CDG","operatingCarrier":"SK","operatingFlightNumber":"0579","marketingCarrier":"SK","marketingFlightNumber":"0579","departure":{"station":"ARN","terminal":"2","scheduledTime":{"local":"2020-02-12T16:10:00Z","utc":"2020-02-12T15:10:00Z"}},"arrival":{"station":"CDG","terminal":"2","scheduledTime":{"local":"2020-02-12T18:45:00Z","utc":"2020-02-12T17:45:00Z"}}},"bookingClass":"Y","serviceClass":"C"},{"id":"P2WNNO-O-01-03","transportationType":"Flight","statusCode":"TK","status":"Confirmed","flight":{"id":"SK1407-20200212-ARN-CPH","operatingCarrier":"SK","operatingFlightNumber":"1407","marketingCarrier":"SK","marketingFlightNumber":"1407","departure":{"station":"ARN","terminal":"2","scheduledTime":{"local":"2020-02-12T15:10:00Z","utc":"2020-02-12T14:10:00Z"}},"arrival":{"station":"CPH","terminal":"2","scheduledTime":{"local":"2020-02-12T16:25:00Z","utc":"2020-02-12T15:25:00Z"}}},"bookingClass":"Y","serviceClass":"C"},{"id":"P2WNNO-O-01-03","transportationType":"Flight","statusCode":"TK","status":"Confirmed","flight":{"id":"SK0559-20200212-CPH-CDG","operatingCarrier":"SK","operatingFlightNumber":"0559","marketingCarrier":"SK","marketingFlightNumber":"0559","departure":{"station":"CPH","terminal":"2","scheduledTime":{"local":"2020-02-12T17:10:00Z","utc":"2020-02-12T16:10:00Z"}},"arrival":{"station":"CDG","terminal":"2","scheduledTime":{"local":"2020-02-12T19:05:00Z","utc":"2020-02-12T18:05:00Z"}}}},{"id":"P2WNNO-O-01-04","transportationType":"Flight","statusCode":"HK","status":"Confirmed","flight":{"id":"LX0645-20200212-CDG-ZRH","operatingCarrier":"LX","operatingFlightNumber":"0645","marketingCarrier":"LX","marketingFlightNumber":"0645","departure":{"station":"CDG","terminal":"2","scheduledTime":{"local":"2020-02-12T20:50:00Z","utc":"2020-02-12T19:50:00Z"}},"arrival":{"station":"ZRH","terminal":"2","scheduledTime":{"local":"2020-02-12T22:00:00Z","utc":"2020-02-12T21:00:00Z"}}},"bookingClass":"Y","serviceClass":"C"}]}]}]';

        List<IRR_MOD_TedsBooking> r = IRR_MOD_TedsBooking.parseArray(json);
        System.assert(r != null);
        System.assert(!r.isEmpty());
    }
}