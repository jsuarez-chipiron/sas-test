/**
 * @author Anton Norell
 * @date 2019-12-19
 * @description Test class for GDPR_DataExtractService
 */
@IsTest
private class GDPR_DataExtractService_Test {
    /**
     * Asserts that the queries in the service are generated correctly based on provided FieldDefinition list. The
     * field definitions are retrieved from static resources.
     */
    @IsTest
    static void shouldReturnQueriesBasedOnFieldDefinitions() {
        Account acc = new Account(
                RecordTypeId = RecordTypeHelper.ACCOUNT_PERSON_EBCUSTOMER,
                LastName = 'LastName'
        );
        insert acc;
        StaticResource fieldDefinition = [SELECT Id, Body FROM StaticResource WHERE Name = 'FieldDefinitionsJSON'];
        List<FieldDefinition> fieldDefinitions = (List<FieldDefinition>)JSON.deserialize(fieldDefinition.Body.toString(), List<FieldDefinition>.class);

        List<String> queries = GDPR_DataExtractService.getQueries(fieldDefinitions, new Id[]{acc.Id});

        System.assertEquals(
                            'SELECT null FROM Account WHERE Id IN (\'' + acc.Id + '\')', queries[0],
                            'Generated incorrect Account query based on provided field definition'
        );
        System.assertEquals(
                        'SELECT Status, AccountId, Description, CaseReason__c, (SELECT MessageDate, FromName, ToAddress, ' +
                        'HtmlBody, TextBody, Subject, FromAddress FROM EmailMessages) FROM Case ' +
                        'WHERE AccountId IN (\'' + acc.Id + '\')',
                        queries[1], 'Generated incorrect Case query based on provided field definition'
        );

        System.assertEquals(
                        'SELECT EndTime, VisitorMessageCount, ChatDuration, EndedBy, StartTime, ' +
                        'IpAddress, Body, Status, AccountId, Location FROM LiveChatTranscript WHERE AccountId IN (\'' + acc.Id + '\')',
                        queries[2], 'Generated incorrect LiveChatTranscript query based on provided field definition'
        );
    }

    /**
     * Asserts that the extract generated by the service includes all records in scope connected to the selected account.
     * Field definitions are retrieved from static resources and the date included in the extract is generated in the
     * test class.
     */
    @IsTest
    static void shouldReturnCorrectPersonalDataExtractBasedOnProvidedFieldDefinition(){
        Account acc = new Account(
                RecordTypeId = RecordTypeHelper.ACCOUNT_PERSON_EBCUSTOMER,
                LastName = 'LastName'
        );
        insert acc;
        Case cse = new Case(
                Subject = 'Subject',
                AccountId = acc.Id
        );
        insert cse;
        LiveChatVisitor lcv = new LiveChatVisitor();
        insert lcv;
        LiveChatTranscript lct = new LiveChatTranscript();
        lct.LiveChatVisitorId = lcv.Id;
        lct.AccountId = acc.Id;
        insert lct;

        StaticResource fieldDefinition = [SELECT Id, Body FROM StaticResource WHERE Name = 'FieldDefinitionsJSON'];
        List<FieldDefinition> fieldDefinitions = (List<FieldDefinition>)JSON.deserialize(fieldDefinition.Body.toString(), List<FieldDefinition>.class);

        String[] jsonData = GDPR_DataExtractService.extractAccountPersonalData(new Id[]{acc.Id}, fieldDefinitions);
        List<SObject> extractObjects = (List<SObject>)JSON.deserialize(jsonData[0], List<SObject>.class);

        System.assertEquals(3, extractObjects.size(), 'Incorrect number of records in extract');
        System.assertEquals(acc.Id, extractObjects[0].Id);
        System.assertEquals(cse.Id, extractObjects[1].Id);
        System.assertEquals(lct.Id, extractObjects[2].Id);
    }

    /**
     * Asserts that the service can query existing field definitions if none are provided as argument.
     * Only a simple assertion is performed as data in extract is dependent on dynamic field definitions
     * that can be changed by configuration in setup;
     */
    @IsTest
    static void shouldReturnPersonalDataExtractBasedOnQueriedFieldDefinition(){
        Account acc = new Account(
                RecordTypeId = RecordTypeHelper.ACCOUNT_PERSON_EBCUSTOMER,
                LastName = 'LastName'
        );
        insert acc;

        String[] jsonData = GDPR_DataExtractService.extractAccountPersonalData(new Id[]{acc.Id}, null);
        List<SObject> extractObjects = (List<SObject>)JSON.deserialize(jsonData[0], List<SObject>.class);

        System.assertNotEquals(null, jsonData);
        System.assertEquals(acc.Id, extractObjects[0].Id);
    }
}