/**
 * @author Niklas Lundkvist, JSON2Apex
 * @date 2020-03-16
 * @description Class for Parsing TedsBooking API callout response.
 *      Automatically generated by JSON2Apex - http://json2apex.herokuapp.com/
 */

public class IRR_MOD_TedsBooking {

    public class ScheduledTime {
        public String local {get;set;}
        public String utc {get;set;}

        public ScheduledTime(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'local') {
                            local = parser.getText();
                        } else if (text == 'utc') {
                            utc = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ScheduledTime consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Email {
        public String type_Z {get;set;} // in json: type
        public String address {get;set;}

        public Email(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'address') {
                            address = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Email consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Flight {
        public String id {get;set;}
        public String operatingCarrier {get;set;}
        public String operatingFlightNumber {get;set;}
        public String marketingCarrier {get;set;}
        public String marketingFlightNumber {get;set;}
        public Departure departure {get;set;}
        public Departure arrival {get;set;}

        public Flight(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'operatingCarrier') {
                            operatingCarrier = parser.getText();
                        } else if (text == 'operatingFlightNumber') {
                            operatingFlightNumber = parser.getText();
                        } else if (text == 'marketingCarrier') {
                            marketingCarrier = parser.getText();
                        } else if (text == 'marketingFlightNumber') {
                            marketingFlightNumber = parser.getText();
                        } else if (text == 'departure') {
                            departure = new Departure(parser);
                        } else if (text == 'arrival') {
                            arrival = new Departure(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Flight consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Segments {
        public String segmentId {get;set;}
        public Object seatedWith {get;set;}
        public Phone ticket {get;set;}
        public String seat {get;set;}
        public Boolean isCheckedIn {get;set;}
        public String checkinOfficeId {get;set;}
        public Boolean isBoarded {get;set;}

        public Segments(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'segmentId') {
                            segmentId = parser.getText();
                        } else if (text == 'seatedWith') {
                            seatedWith = parser.readValueAs(Object.class);
                        } else if (text == 'ticket') {
                            ticket = new Phone(parser);
                        } else if (text == 'seat') {
                            seat = parser.getText();
                        } else if (text == 'isCheckedIn') {
                            isCheckedIn = parser.getBooleanValue();
                        } else if (text == 'checkinOfficeId') {
                            checkinOfficeId = parser.getText();
                        } else if (text == 'isBoarded') {
                            isBoarded = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Segments consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Created {
        public String officeId {get;set;}
        public String at {get;set;}

        public Created(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'officeId') {
                            officeId = parser.getText();
                        } else if (text == 'at') {
                            at = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Created consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Contact {
        public List<Phone> phone {get;set;}
        public List<Email> email {get;set;}

        public Contact(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'phone') {
                            phone = arrayOfPhone(parser);
                        } else if (text == 'email') {
                            email = arrayOfEmail(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Contact consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Audit {
        public Created created {get;set;}
        public Created updated {get;set;}

        public Audit(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'created') {
                            created = new Created(parser);
                        } else if (text == 'updated') {
                            updated = new Created(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Audit consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class FrequentTraveler {
        public String carrier {get;set;}
        public String tier {get;set;}
        public String number_Z {get;set;} // in json: number

        public FrequentTraveler(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'carrier') {
                            carrier = parser.getText();
                        } else if (text == 'tier') {
                            tier = parser.getText();
                        } else if (text == 'number') {
                            number_Z = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'FrequentTraveler consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Passengers {
        public String id {get;set;}
        public String title {get;set;}
        public String firstName {get;set;}
        public String lastName {get;set;}
        public String type_Z {get;set;} // in json: type
        public Contact contact {get;set;}
        public FrequentTraveler frequentTraveler {get;set;}
        public List<Segments> segments {get;set;}

        public Passengers(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'title') {
                            title = parser.getText();
                        } else if (text == 'firstName') {
                            firstName = parser.getText();
                        } else if (text == 'lastName') {
                            lastName = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'contact') {
                            contact = new Contact(parser);
                        } else if (text == 'frequentTraveler') {
                            frequentTraveler = new FrequentTraveler(parser);
                        } else if (text == 'segments') {
                            segments = arrayOfSegments(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Passengers consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Departure {
        public String station {get;set;}
        public String terminal {get;set;}
        public ScheduledTime scheduledTime {get;set;}

        public Departure(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'station') {
                            station = parser.getText();
                        } else if (text == 'terminal') {
                            terminal = parser.getText();
                        } else if (text == 'scheduledTime') {
                            scheduledTime = new ScheduledTime(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Departure consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Phone {
        public String type_Z {get;set;} // in json: type
        public String number_Z {get;set;} // in json: number

        public Phone(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'number') {
                            number_Z = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Phone consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Segments_Z {
        public String id {get;set;}
        public String transportationType {get;set;}
        public String statusCode {get;set;}
        public String status {get;set;}
        public Flight flight {get;set;}
        public String bookingClass {get;set;}
        public String serviceClass {get;set;}

        public Segments_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'transportationType') {
                            transportationType = parser.getText();
                        } else if (text == 'statusCode') {
                            statusCode = parser.getText();
                        } else if (text == 'status') {
                            status = parser.getText();
                        } else if (text == 'flight') {
                            flight = new Flight(parser);
                        } else if (text == 'bookingClass') {
                            bookingClass = parser.getText();
                        } else if (text == 'serviceClass') {
                            serviceClass = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Segments_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public String id {get;set;}
    public String reference {get;set;}
    public String type_Z {get;set;} // in json: type
    public String status {get;set;}
    public String codsId {get;set;}
    public Audit audit {get;set;}
    public List<Passengers> passengers {get;set;}
    public List<Trips> trips {get;set;}

    public IRR_MOD_TedsBooking(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'id') {
                        id = parser.getText();
                    } else if (text == 'reference') {
                        reference = parser.getText();
                    } else if (text == 'type') {
                        type_Z = parser.getText();
                    } else if (text == 'status') {
                        status = parser.getText();
                    } else if (text == 'codsId') {
                        codsId = parser.getText();
                    } else if (text == 'audit') {
                        audit = new Audit(parser);
                    } else if (text == 'passengers') {
                        passengers = arrayOfPassengers(parser);
                    } else if (text == 'trips') {
                        trips = arrayOfTrips(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'IRR_MOD_TedsBooking consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Trips {
        public String id {get;set;}
        public String type_Z {get;set;} // in json: type
        public List<Segments_Z> segments {get;set;}

        public Trips(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'segments') {
                            segments = arrayOfSegments_Z(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Trips consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }


    public static IRR_MOD_TedsBooking parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new IRR_MOD_TedsBooking(parser);
    }

    public static List<IRR_MOD_TedsBooking> parseArray(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return arrayOfTedsBookings(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    private static List<Email> arrayOfEmail(System.JSONParser p) {
        List<Email> res = new List<Email>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Email(p));
        }
        return res;
    }

    private static List<Segments_Z> arrayOfSegments_Z(System.JSONParser p) {
        List<Segments_Z> res = new List<Segments_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Segments_Z(p));
        }
        return res;
    }


    private static List<Segments> arrayOfSegments(System.JSONParser p) {
        List<Segments> res = new List<Segments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Segments(p));
        }
        return res;
    }


    private static List<Passengers> arrayOfPassengers(System.JSONParser p) {
        List<Passengers> res = new List<Passengers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Passengers(p));
        }
        return res;
    }


    private static List<IRR_MOD_TedsBooking> arrayOfTedsBookings(System.JSONParser p) {
        List<IRR_MOD_TedsBooking> res = new List<IRR_MOD_TedsBooking>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new IRR_MOD_TedsBooking(p));
        }
        return res;
    }

    private static List<Trips> arrayOfTrips(System.JSONParser p) {
        List<Trips> res = new List<Trips>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Trips(p));
        }
        return res;
    }

    private static List<Phone> arrayOfPhone(System.JSONParser p) {
        List<Phone> res = new List<Phone>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Phone(p));
        }
        return res;
    }
}