/**
    Batch class which ensures that all Communication Logs are deleted after
    X number of days of created date.
    @author Ludvig WÃ¤limaa
*/
global with sharing class GDPR_DeleteCommunicationLog_Batch extends SBS_ScheduledBatch {
  /**
        The date at which Communication Logs will be removed
    */
  private DateTime lastRetentionDate;
  /**
        Initiates the batch class and extracts the date used to filter out Communication Logs for removal
    */
  global GDPR_DeleteCommunicationLog_Batch() {
    
    this.setUseTransactionControl(false);
  }
    /**
   overriding the absract method to set batch class Params
   */
  global override void setVariables(
    String obj,
    Integer retentionPeriod,
    string caseField,
    string caseType,
    string relSObjField,
    string relSobjName
  ) {
  lastRetentionDate = DateTime.newInstance(
      Date.today()
        .addDays(-retentionPeriod),
      Time.newInstance(0, 0, 0, 0)
    );
  }

  /**
        Iterates over all Communication Logs before the retention period
        @param bc The batch context
    */
  global Database.QueryLocator start(Database.BatchableContext bc) {
    return IRR_SEL_CommunicationLogsSelector.newInstance()
      .getGDPRLogsQueryLocator(lastRetentionDate);
  }

  /**
        Deletes the Communication Logs 
        @param bc The batchable context of the batch job
        @param sObjScope The Communication Logs to delete
    */
  global override void executeScope(
    Database.BatchableContext bc,
    SObject[] sObjScope
  ) {
    Set<Id> idSet = new Set<Id>();
    for (SObject so : sObjScope)
      idSet.add(so.Id);
    IRR_SVC_CommunicationService.processGDPRLogs(idSet, lastRetentionDate);
  }
}